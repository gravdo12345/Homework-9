public class MyStack {
    private Object[] array;
    private int top;
    private static final int DEFAULT_CAPACITY = 10;

    public MyStack() {
        array = new Object[DEFAULT_CAPACITY];
        top = -1;
    }

    public void push(Object value) {
        if (top == array.length - 1) {
            resize();
        }
        top++;
        array[top] = value;
    }

    public void remove(int index) {
        if (index < 0 || index > top) {
            throw new IndexOutOfBoundsException("Invalid index");
        }
        for (int i = index; i < top; i++) {
            array[i] = array[i + 1];
        }
        top--;
    }

    public void clear() {
        top = -1;
    }

    public int size() {
        return top + 1;
    }

    public Object peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return array[top];
    }

    public Object pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        Object data = array[top];
        top--;
        return data;
    }

    public boolean isEmpty() {
        return top == -1;
    }

    private void resize() {
        int newCapacity = array.length * 2;
        Object[] newArray = new Object[newCapacity];
        for (int i = 0; i <= top; i++) {
            newArray[i] = array[i];
        }
        array = newArray;
    }
}
